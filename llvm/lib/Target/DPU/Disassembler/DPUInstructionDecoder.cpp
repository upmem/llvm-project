//===-- DPUInstructionDecoder.cpp - Disassembler for DPU
//-------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements the DPUInstructionDecoder class.
// Automatically generated by DPU disasm, please do not modify!
//
//===----------------------------------------------------------------------===//

#include "DPUInstructionDecoder.h"

using namespace llvm;

#define GET_INSTRINFO_ENUM
#include "DPUGenInstrInfo.inc"
#define GET_REGINFO_ENUM
#include "DPUGenRegisterInfo.inc"

MCDisassembler::DecodeStatus DPUInstructionDecoder::getInstruction(
    MCInst &MI, uint64_t &Insn, DPUOperandDecoder &DAsm, bool useSugar) const {
  MI.clear();
  if ((((Insn >> 44) & 0xfL)) == (0x7L)) {
    if ((((Insn >> 32) & 0x3L)) == (0x3L)) {
      if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
        if (((((Insn >> 28) & 0xfL)) & (0x8L)) == (0x8L)) {
          if ((((Insn >> 24) & 0x3L)) != (0x0L)) {
            MI.setOpcode(DPU::ACQUIRErici);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 26) & 31) << 8) | (((Insn >> 39) & 7) << 13),
                16);
            DAsm.Decode_cc(MI, ConditionClass::AcquireCC,
                           (((Insn >> 24) & 3) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0x3L)) == (0x0L)) {
            MI.setOpcode(DPU::RELEASErici);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 26) & 31) << 8) | (((Insn >> 39) & 7) << 13),
                16);
            DAsm.Decode_cc(MI, ConditionClass::ReleaseCC,
                           (((Insn >> 24) & 3) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x2L)) {
          if (((((Insn >> 39) & 0x1fL)) & (0x1bL)) == (0x1bL)) {
            if (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                ((((Insn >> 24) & 0xfL)) > (0xbL))) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0xf00ffffL)) == (0x0L))) {
                MI.setOpcode(DPU::BOOTri);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(
                    MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                    8);
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::BOOTrici);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::BootCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 39) & 0x1fL)) & (0x1fL)) == (0x19L)) {
            if (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                ((((Insn >> 24) & 0xfL)) > (0xbL))) {
              MI.setOpcode(DPU::CLR_RUNrici);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::BootCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 39) & 0x1fL)) & (0x1fL)) == (0x1cL)) {
            if ((((Insn >> 34) & 0x1fL)) == (0x18L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0xffffffL)) == (0x0L))) {
                  MI.setOpcode(DPU::BKP);
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::FAULTi);
                DAsm.Decode_imm(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                        (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                        (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 39) & 0x1fL)) & (0x1fL)) == (0x18L)) {
            if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0x3L)) {
              if (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                  ((((Insn >> 24) & 0xfL)) > (0xbL))) {
                MI.setOpcode(DPU::READ_RUNrici);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(
                    MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                    8);
                DAsm.Decode_cc(MI, ConditionClass::BootCC,
                               (((Insn >> 24) & 15) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 39) & 0x1fL)) & (0x1bL)) == (0x1aL)) {
            if (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                ((((Insn >> 24) & 0xfL)) > (0xbL))) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0xf00ffffL)) == (0x0L))) {
                MI.setOpcode(DPU::RESUMEri);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(
                    MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                    8);
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::RESUMErici);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::BootCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 39) & 0x1fL)) & (0x1fL)) == (0x1dL)) {
            if ((((Insn >> 34) & 0x1fL)) == (0x1cL)) {
              if (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                  ((((Insn >> 24) & 0xfL)) > (0xbL))) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0xf00ffffL)) == (0x0L))) {
                  MI.setOpcode(DPU::STOP);
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::STOPci);
                DAsm.Decode_cc(MI, ConditionClass::BootCC,
                               (((Insn >> 24) & 15) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0x0L)) {
          if (((((Insn >> 39) & 0x1fL)) & (0x1fL)) == (0x18L)) {
            if ((((Insn >> 34) & 0x1fL)) == (0x18L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x0L)) {
                  if (((((Insn >> 0) & 0xffffL)) & (0xffffL)) == (0x0L)) {
                    MI.setOpcode(DPU::NOP);
                    return MCDisassembler::Success;
                  }
                  return MCDisassembler::Fail;
                }
                return MCDisassembler::Fail;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 37) & 0x3L)) != (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::TELLri);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                        (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                        (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
          if ((((Insn >> 28) & 0x1L)) == (0x0L)) {
            if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x0L)) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x8000000L)) == (0x0L))) {
                MI.setOpcode(DPU::SBrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11),
                    12);
                DAsm.Decode_imm(
                    MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4),
                    8);
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::SBerii);
              DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4),
                  8);
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x6L)) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x8000000L)) == (0x0L))) {
                MI.setOpcode(DPU::SDrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11),
                    12);
                DAsm.Decode_imm(MI,
                                (((Insn >> 16) & 15) << 0) |
                                    (((Insn >> 0) & 4095) << 4),
                                16);
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::SDerii);
              DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                  16);
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x2L)) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x8000000L)) == (0x0L))) {
                MI.setOpcode(DPU::SHrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11),
                    12);
                DAsm.Decode_imm(MI,
                                (((Insn >> 16) & 15) << 0) |
                                    (((Insn >> 0) & 4095) << 4),
                                16);
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::SHerii);
              DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                  16);
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x4L)) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x8000000L)) == (0x0L))) {
                MI.setOpcode(DPU::SWrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11),
                    12);
                DAsm.Decode_imm(MI,
                                (((Insn >> 16) & 15) << 0) |
                                    (((Insn >> 0) & 4095) << 4),
                                16);
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::SWerii);
              DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                  16);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 28) & 0x1L)) == (0x1L)) {
            if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x0L)) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x8000000L)) == (0x0L))) {
                MI.setOpcode(DPU::SBSrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11),
                    12);
                DAsm.Decode_imm(
                    MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4),
                    8);
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::SBesii);
              DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4),
                  8);
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x6L)) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x8000000L)) == (0x0L))) {
                MI.setOpcode(DPU::SDSrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11),
                    12);
                DAsm.Decode_imm(MI,
                                (((Insn >> 16) & 15) << 0) |
                                    (((Insn >> 0) & 4095) << 4),
                                16);
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::SDesii);
              DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                  16);
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x2L)) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x8000000L)) == (0x0L))) {
                MI.setOpcode(DPU::SHSrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11),
                    12);
                DAsm.Decode_imm(MI,
                                (((Insn >> 16) & 15) << 0) |
                                    (((Insn >> 0) & 4095) << 4),
                                16);
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::SHesii);
              DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                  16);
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x4L)) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x8000000L)) == (0x0L))) {
                MI.setOpcode(DPU::SWSrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11),
                    12);
                DAsm.Decode_imm(MI,
                                (((Insn >> 16) & 15) << 0) |
                                    (((Insn >> 0) & 4095) << 4),
                                16);
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::SWesii);
              DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                  16);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
          if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x0L)) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x80f000fL)) == (0x0L))) {
              MI.setOpcode(DPU::SB_IDri);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              return MCDisassembler::Success;
            }
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x8000000L)) == (0x0L))) {
              MI.setOpcode(DPU::SB_IDrii);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4),
                  8);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::SB_IDerii);
            DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_off(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                    (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                    (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                    (((Insn >> 12) & 1) << 11),
                12);
            DAsm.Decode_imm(
                MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4), 8);
            return MCDisassembler::Success;
          }
          if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x6L)) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x80f0fffL)) == (0x0L))) {
              MI.setOpcode(DPU::SD_IDri);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              return MCDisassembler::Success;
            }
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x8000000L)) == (0x0L))) {
              MI.setOpcode(DPU::SD_IDrii);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                  16);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::SD_IDerii);
            DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_off(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                    (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                    (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                    (((Insn >> 12) & 1) << 11),
                12);
            DAsm.Decode_imm(
                MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                16);
            return MCDisassembler::Success;
          }
          if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x2L)) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x80f0fffL)) == (0x0L))) {
              MI.setOpcode(DPU::SH_IDri);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              return MCDisassembler::Success;
            }
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x8000000L)) == (0x0L))) {
              MI.setOpcode(DPU::SH_IDrii);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                  16);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::SH_IDerii);
            DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_off(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                    (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                    (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                    (((Insn >> 12) & 1) << 11),
                12);
            DAsm.Decode_imm(
                MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                16);
            return MCDisassembler::Success;
          }
          if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x4L)) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x80f0fffL)) == (0x0L))) {
              MI.setOpcode(DPU::SW_IDri);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              return MCDisassembler::Success;
            }
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x8000000L)) == (0x0L))) {
              MI.setOpcode(DPU::SW_IDrii);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                      (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11),
                  12);
              DAsm.Decode_imm(
                  MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                  16);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::SW_IDerii);
            DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_off(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                    (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                    (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                    (((Insn >> 12) & 1) << 11),
                12);
            DAsm.Decode_imm(
                MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4),
                16);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
        if ((((Insn >> 25) & 0x3L)) != (0x3L)) {
          if (((((Insn >> 28) & 0xfL)) & (0xcL)) == (0x4L)) {
            if ((((Insn >> 28) & 0x1L)) == (0x0L)) {
              if (((((Insn >> 24) & 0xfL)) & (0x7L)) == (0x1L)) {
                if (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                    ((((Insn >> 39) & 0x1L)) == (0x1L))) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LBS_Srri);
                    DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LBS_Serri);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                if ((((Insn >> 29) & 0x1L)) == (0x0L)) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LBSrri);
                    DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LBSerri);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x7L)) == (0x0L)) {
                if (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                    ((((Insn >> 39) & 0x1L)) == (0x0L))) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LBU_Urri);
                    DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LBU_Uerri);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                if ((((Insn >> 29) & 0x1L)) == (0x0L)) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LBUrri);
                    DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LBUerri);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x7L)) == (0x3L)) {
                if (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                    ((((Insn >> 39) & 0x1L)) == (0x1L))) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LHS_Srri);
                    DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LHS_Serri);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                if ((((Insn >> 29) & 0x1L)) == (0x0L)) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LHSrri);
                    DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LHSerri);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x7L)) == (0x2L)) {
                if (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                    ((((Insn >> 39) & 0x1L)) == (0x0L))) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LHU_Urri);
                    DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LHU_Uerri);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                if ((((Insn >> 29) & 0x1L)) == (0x0L)) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LHUrri);
                    DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LHUerri);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x4L)) {
                if (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                    ((((Insn >> 39) & 0x1L)) == (0x1L))) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LW_Srri);
                    DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LW_Serri);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                if (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                    ((((Insn >> 39) & 0x1L)) == (0x0L))) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LW_Urri);
                    DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LW_Uerri);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                if ((((Insn >> 29) & 0x1L)) == (0x0L)) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LWrri);
                    DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LWerri);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 28) & 0x1L)) == (0x1L)) {
              if (((((Insn >> 24) & 0xfL)) & (0x7L)) == (0x1L)) {
                if ((((Insn >> 29) & 0x1L)) == (0x0L)) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LBSSrri);
                    DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LBSersi);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x7L)) == (0x0L)) {
                if ((((Insn >> 29) & 0x1L)) == (0x0L)) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LBUSrri);
                    DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LBUersi);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x7L)) == (0x3L)) {
                if ((((Insn >> 29) & 0x1L)) == (0x0L)) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LHSSrri);
                    DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LHSersi);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x7L)) == (0x2L)) {
                if ((((Insn >> 29) & 0x1L)) == (0x0L)) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LHUSrri);
                    DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LHUersi);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x4L)) {
                if ((((Insn >> 29) & 0x1L)) == (0x0L)) {
                  if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                    (0x8000000L)) == (0x0L))) {
                    MI.setOpcode(DPU::LWSrri);
                    DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                    DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                    DAsm.Decode_off(MI,
                                    (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 16) & 15) << 4) |
                                        (((Insn >> 15) & 1) << 8) |
                                        (((Insn >> 14) & 1) << 9) |
                                        (((Insn >> 13) & 1) << 10) |
                                        (((Insn >> 12) & 1) << 11) |
                                        (((Insn >> 0) & 4095) << 12),
                                    24);
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::LWersi);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 25) & 0x3L)) == (0x3L)) {
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
            if ((((Insn >> 28) & 0x1L)) == (0x0L)) {
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x6L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x8000000L)) == (0x0L))) {
                  MI.setOpcode(DPU::LDrri);
                  DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::LDerri);
                DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
                DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                        (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                        (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 28) & 0x1L)) == (0x1L)) {
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x6L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x8000000L)) == (0x0L))) {
                  MI.setOpcode(DPU::LDSrri);
                  DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 16) & 15) << 4) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::LDersi);
                DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
                DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                        (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                        (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    if ((((Insn >> 32) & 0x3L)) != (0x3L)) {
      if (((((Insn >> 39) & 0x1fL)) & (0x1fL)) == (0x0L)) {
        if (((((Insn >> 0) & 0xffffL)) & (0xffffL)) == (0x0L)) {
          MI.setOpcode(DPU::LDMArri);
          DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_immDma(MI, (((Insn >> 24) & 255) << 0));
          return MCDisassembler::Success;
        }
        if (((((Insn >> 0) & 0xffffL)) & (0xffffL)) == (0x1L)) {
          MI.setOpcode(DPU::LDMAIrri);
          DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_immDma(MI, (((Insn >> 24) & 255) << 0));
          return MCDisassembler::Success;
        }
        if (((((Insn >> 0) & 0xffffL)) & (0xffffL)) == (0x2L)) {
          MI.setOpcode(DPU::SDMArri);
          DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_immDma(MI, (((Insn >> 24) & 255) << 0));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
        if ((((Insn >> 16) & 0x1L)) == (0x0L)) {
          if (((((Insn >> 28) & 0xfL)) & (0xcL)) == (0x4L)) {
            if ((((Insn >> 28) & 0x1L)) == (0x0L)) {
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x0L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x8000000L)) == (0x0L))) {
                  MI.setOpcode(DPU::SBrir);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 39) & 7) << 4) |
                                      (((Insn >> 24) & 1) << 7) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::SBerir);
                DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x2L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x8000000L)) == (0x0L))) {
                  MI.setOpcode(DPU::SHrir);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 39) & 7) << 4) |
                                      (((Insn >> 24) & 1) << 7) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::SHerir);
                DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x4L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x8000000L)) == (0x0L))) {
                  MI.setOpcode(DPU::SWrir);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 39) & 7) << 4) |
                                      (((Insn >> 24) & 1) << 7) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::SWerir);
                DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 28) & 0x1L)) == (0x1L)) {
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x0L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x8000000L)) == (0x0L))) {
                  MI.setOpcode(DPU::SBSrir);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 39) & 7) << 4) |
                                      (((Insn >> 24) & 1) << 7) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::SBesir);
                DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x2L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x8000000L)) == (0x0L))) {
                  MI.setOpcode(DPU::SHSrir);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 39) & 7) << 4) |
                                      (((Insn >> 24) & 1) << 7) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::SHesir);
                DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x4L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x8000000L)) == (0x0L))) {
                  MI.setOpcode(DPU::SWSrir);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 39) & 7) << 4) |
                                      (((Insn >> 24) & 1) << 7) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::SWesir);
                DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 16) & 0x1L)) == (0x1L)) {
          if (((((Insn >> 28) & 0xfL)) & (0xcL)) == (0x4L)) {
            if ((((Insn >> 28) & 0x1L)) == (0x0L)) {
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x6L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x8000000L)) == (0x0L))) {
                  MI.setOpcode(DPU::SDrir);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 39) & 7) << 4) |
                                      (((Insn >> 24) & 1) << 7) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::SDerir);
                DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 28) & 0x1L)) == (0x1L)) {
              if (((((Insn >> 24) & 0xfL)) & (0x6L)) == (0x6L)) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x8000000L)) == (0x0L))) {
                  MI.setOpcode(DPU::SDSrir);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_off(MI,
                                  (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 39) & 7) << 4) |
                                      (((Insn >> 24) & 1) << 7) |
                                      (((Insn >> 15) & 1) << 8) |
                                      (((Insn >> 14) & 1) << 9) |
                                      (((Insn >> 13) & 1) << 10) |
                                      (((Insn >> 12) & 1) << 11) |
                                      (((Insn >> 0) & 4095) << 12),
                                  24);
                  DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::SDesir);
                DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_off(
                    MI,
                    (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) |
                        (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                        (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12),
                    24);
                DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    return MCDisassembler::Fail;
  }
  if (((((Insn >> 45) & 0x7L)) == (0x0L)) &&
      ((((Insn >> 42) & 0x3L)) != (0x3L))) {
    if (((((Insn >> 32) & 0x3L)) != (0x3L)) &&
        ((((Insn >> 16) & 0x1L)) == (0x0L))) {
      if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
          ((((Insn >> 39) & 0x1L)) == (0x1L))) {
        if ((((Insn >> 37) & 0x3L)) == (0x3L)) {
          MI.setOpcode(DPU::ADD_Srri);
          DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
          ((((Insn >> 39) & 0x1L)) == (0x0L))) {
        if ((((Insn >> 37) & 0x3L)) == (0x3L)) {
          MI.setOpcode(DPU::ADD_Urri);
          DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    if ((((Insn >> 32) & 0x3L)) == (0x3L)) {
      if (((((Insn >> 44) & 0xfL)) == (0x0L)) &&
          ((((Insn >> 42) & 0x3L)) != (0x3L))) {
        if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
          MI.setOpcode(DPU::ADDrri);
          DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
          DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 44) & 0xfL)) == (0x1L)) &&
          ((((Insn >> 42) & 0x3L)) != (0x3L))) {
        if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
          MI.setOpcode(DPU::ADDCrri);
          DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
          DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    return MCDisassembler::Fail;
  }
  if ((((((Insn >> 47) & 0x1L)) == (0x0L)) &&
       ((((Insn >> 44) & 0x7L)) != (0x7L))) &&
      ((((Insn >> 42) & 0x3L)) == (0x3L))) {
    if ((((Insn >> 32) & 0x3L)) == (0x3L)) {
      if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
           ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
          ((((Insn >> 39) & 0x1L)) == (0x1L))) {
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x0L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                 ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
              MI.setOpcode(DPU::ADD_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
              MI.setOpcode(DPU::ADD_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                             (((Insn >> 24) & 31) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
              MI.setOpcode(DPU::ADD_Srrif);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x2L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                 ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
              MI.setOpcode(DPU::ADDC_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
              MI.setOpcode(DPU::ADDC_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                             (((Insn >> 24) & 31) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
              MI.setOpcode(DPU::ADDC_Srrif);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
               ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
            MI.setOpcode(DPU::SUB_Srirc);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                           (((Insn >> 24) & 31) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
               (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
            MI.setOpcode(DPU::SUB_Srirci);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                           (((Insn >> 24) & 31) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
            MI.setOpcode(DPU::SUB_Srirf);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0x8L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                 ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUB_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                 (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                  (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUB_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                ((((Insn >> 30) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::SUB_Srrif);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
               ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
            MI.setOpcode(DPU::SUBC_Srirc);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                           (((Insn >> 24) & 31) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
               (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
            MI.setOpcode(DPU::SUBC_Srirci);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                           (((Insn >> 24) & 31) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
            MI.setOpcode(DPU::SUBC_Srirf);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0xaL)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                 ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBC_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                 (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                  (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBC_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                ((((Insn >> 30) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::SUBC_Srrif);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
           ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
          ((((Insn >> 39) & 0x1L)) == (0x0L))) {
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x0L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                 ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
              MI.setOpcode(DPU::ADD_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
              MI.setOpcode(DPU::ADD_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                             (((Insn >> 24) & 31) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
              MI.setOpcode(DPU::ADD_Urrif);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x2L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                 ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
              MI.setOpcode(DPU::ADDC_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
              MI.setOpcode(DPU::ADDC_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                             (((Insn >> 24) & 31) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
              MI.setOpcode(DPU::ADDC_Urrif);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
               ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
            MI.setOpcode(DPU::SUB_Urirc);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                           (((Insn >> 24) & 31) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
               (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
            MI.setOpcode(DPU::SUB_Urirci);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                           (((Insn >> 24) & 31) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
            MI.setOpcode(DPU::SUB_Urirf);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0x8L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                 ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUB_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                 (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                  (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUB_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                ((((Insn >> 30) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::SUB_Urrif);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
               ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
            MI.setOpcode(DPU::SUBC_Urirc);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                           (((Insn >> 24) & 31) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
               (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
            MI.setOpcode(DPU::SUBC_Urirci);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                           (((Insn >> 24) & 31) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
            MI.setOpcode(DPU::SUBC_Urirf);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0xaL)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                 ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBC_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                 (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                  (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBC_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                ((((Insn >> 30) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::SUBC_Urrif);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
          ((((Insn >> 46) & 0x1L)) == (0x0L))) {
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x0L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                 ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
              MI.setOpcode(DPU::ADDrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
              MI.setOpcode(DPU::ADDrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                             (((Insn >> 24) & 31) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
              MI.setOpcode(DPU::ADDrrif);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0x1L)) == (0x1L)) &&
              ((((Insn >> 24) & 0xfL)) == (0x0L))) {
            if (useSugar && (true)) {
              MI.setOpcode(DPU::ADDSrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 31) << 12) | (((Insn >> 5) & 1) << 16) |
                      (((Insn >> 6) & 1) << 16) | (((Insn >> 7) & 1) << 16) |
                      (((Insn >> 8) & 1) << 16) | (((Insn >> 9) & 1) << 16) |
                      (((Insn >> 10) & 1) << 16) | (((Insn >> 11) & 1) << 16),
                  24);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::ADDssi);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 31) << 12) | (((Insn >> 5) & 1) << 16) |
                    (((Insn >> 6) & 1) << 16) | (((Insn >> 7) & 1) << 16) |
                    (((Insn >> 8) & 1) << 16) | (((Insn >> 9) & 1) << 16) |
                    (((Insn >> 10) & 1) << 16) | (((Insn >> 11) & 1) << 16),
                24);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x2L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                 ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
              MI.setOpcode(DPU::ADDCrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
              MI.setOpcode(DPU::ADDCrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                             (((Insn >> 24) & 31) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
              MI.setOpcode(DPU::ADDCrrif);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
               ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
            MI.setOpcode(DPU::SUBrirc);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                           (((Insn >> 24) & 31) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
               (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
            if (useSugar &&
                (((((Insn >> 0) & 0xffffffffffffL)) & (0xff0000L)) == (0x0L))) {
              MI.setOpcode(DPU::NEGrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                             (((Insn >> 24) & 31) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::SUBrirci);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                           (((Insn >> 24) & 31) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
            MI.setOpcode(DPU::SUBrirf);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0x8L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                 ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                 (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                  (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                ((((Insn >> 30) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::SUBrrif);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0x1L)) == (0x1L)) &&
              ((((Insn >> 24) & 0xfL)) == (0x0L))) {
            if (useSugar && (true)) {
              MI.setOpcode(DPU::SUBSrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 31) << 12) | (((Insn >> 5) & 1) << 16) |
                      (((Insn >> 6) & 1) << 16) | (((Insn >> 7) & 1) << 16) |
                      (((Insn >> 8) & 1) << 16) | (((Insn >> 9) & 1) << 16) |
                      (((Insn >> 10) & 1) << 16) | (((Insn >> 11) & 1) << 16),
                  24);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::SUBssi);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 31) << 12) | (((Insn >> 5) & 1) << 16) |
                    (((Insn >> 6) & 1) << 16) | (((Insn >> 7) & 1) << 16) |
                    (((Insn >> 8) & 1) << 16) | (((Insn >> 9) & 1) << 16) |
                    (((Insn >> 10) & 1) << 16) | (((Insn >> 11) & 1) << 16),
                24);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
               ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
            MI.setOpcode(DPU::SUBCrirc);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                           (((Insn >> 24) & 31) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
               (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
            MI.setOpcode(DPU::SUBCrirci);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                           (((Insn >> 24) & 31) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
            MI.setOpcode(DPU::SUBCrirf);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                   (((Insn >> 44) & 3) << 3));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0xaL)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                 ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBCrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                 (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                  (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBCrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                ((((Insn >> 30) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::SUBCrrif);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                     (((Insn >> 44) & 3) << 3));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x0L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                 ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
              MI.setOpcode(DPU::ADDzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                  27);
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
              MI.setOpcode(DPU::ADDzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(MI,
                              (((Insn >> 20) & 15) << 0) |
                                  (((Insn >> 16) & 15) << 4) |
                                  (((Insn >> 39) & 7) << 8),
                              11);
              DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                             (((Insn >> 24) & 31) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
              MI.setOpcode(DPU::ADDzrif);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                  27);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x2L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                 ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
              MI.setOpcode(DPU::ADDCzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                  27);
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
              MI.setOpcode(DPU::ADDCzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(MI,
                              (((Insn >> 20) & 15) << 0) |
                                  (((Insn >> 16) & 15) << 4) |
                                  (((Insn >> 39) & 7) << 8),
                              11);
              DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                             (((Insn >> 24) & 31) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
              MI.setOpcode(DPU::ADDCzrif);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                  27);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
               ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
            MI.setOpcode(DPU::SUBzirc);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                27);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                           (((Insn >> 24) & 31) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
               (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
            MI.setOpcode(DPU::SUBzirci);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_imm(MI,
                            (((Insn >> 20) & 15) << 0) |
                                (((Insn >> 16) & 15) << 4) |
                                (((Insn >> 39) & 7) << 8),
                            11);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                           (((Insn >> 24) & 31) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
            MI.setOpcode(DPU::SUBzirf);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                27);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0x8L)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                 ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                  27);
              DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                 (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                  (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x3805fff0000L)) == (0x2000000L))) {
                MI.setOpcode(DPU::JZri);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x3805fff0000L)) == (0x3000000L))) {
                MI.setOpcode(DPU::JNZri);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x5f000000L)) == (0x2000000L))) {
                MI.setOpcode(DPU::JEQrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(MI,
                                (((Insn >> 20) & 15) << 0) |
                                    (((Insn >> 16) & 15) << 4) |
                                    (((Insn >> 39) & 7) << 8),
                                11);
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x5f000000L)) == (0x3000000L))) {
                MI.setOpcode(DPU::JNEQrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(MI,
                                (((Insn >> 20) & 15) << 0) |
                                    (((Insn >> 16) & 15) << 4) |
                                    (((Insn >> 39) & 7) << 8),
                                11);
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x5f000000L)) == (0x14000000L))) {
                MI.setOpcode(DPU::JLTUrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(MI,
                                (((Insn >> 20) & 15) << 0) |
                                    (((Insn >> 16) & 15) << 4) |
                                    (((Insn >> 39) & 7) << 8),
                                11);
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x5f000000L)) == (0x1b000000L))) {
                MI.setOpcode(DPU::JGTUrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(MI,
                                (((Insn >> 20) & 15) << 0) |
                                    (((Insn >> 16) & 15) << 4) |
                                    (((Insn >> 39) & 7) << 8),
                                11);
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x5f000000L)) == (0x1a000000L))) {
                MI.setOpcode(DPU::JLEUrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(MI,
                                (((Insn >> 20) & 15) << 0) |
                                    (((Insn >> 16) & 15) << 4) |
                                    (((Insn >> 39) & 7) << 8),
                                11);
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x5f000000L)) == (0x15000000L))) {
                MI.setOpcode(DPU::JGEUrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(MI,
                                (((Insn >> 20) & 15) << 0) |
                                    (((Insn >> 16) & 15) << 4) |
                                    (((Insn >> 39) & 7) << 8),
                                11);
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x5f000000L)) == (0x16000000L))) {
                MI.setOpcode(DPU::JLTSrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(MI,
                                (((Insn >> 20) & 15) << 0) |
                                    (((Insn >> 16) & 15) << 4) |
                                    (((Insn >> 39) & 7) << 8),
                                11);
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x5f000000L)) == (0x19000000L))) {
                MI.setOpcode(DPU::JGTSrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(MI,
                                (((Insn >> 20) & 15) << 0) |
                                    (((Insn >> 16) & 15) << 4) |
                                    (((Insn >> 39) & 7) << 8),
                                11);
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x5f000000L)) == (0x18000000L))) {
                MI.setOpcode(DPU::JLESrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(MI,
                                (((Insn >> 20) & 15) << 0) |
                                    (((Insn >> 16) & 15) << 4) |
                                    (((Insn >> 39) & 7) << 8),
                                11);
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0x5f000000L)) == (0x17000000L))) {
                MI.setOpcode(DPU::JGESrii);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_imm(MI,
                                (((Insn >> 20) & 15) << 0) |
                                    (((Insn >> 16) & 15) << 4) |
                                    (((Insn >> 39) & 7) << 8),
                                11);
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::SUBzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(MI,
                              (((Insn >> 20) & 15) << 0) |
                                  (((Insn >> 16) & 15) << 4) |
                                  (((Insn >> 39) & 7) << 8),
                              11);
              DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                ((((Insn >> 30) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::SUBzrif);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                  27);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
               ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
            MI.setOpcode(DPU::SUBCzirc);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                27);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                           (((Insn >> 24) & 31) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
               (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
            MI.setOpcode(DPU::SUBCzirci);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_imm(MI,
                            (((Insn >> 20) & 15) << 0) |
                                (((Insn >> 16) & 15) << 4) |
                                (((Insn >> 39) & 7) << 8),
                            11);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                           (((Insn >> 24) & 31) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
            MI.setOpcode(DPU::SUBCzirf);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                27);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0xaL)) {
          if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                 ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBCzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                  27);
              DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                 (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                  (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
              MI.setOpcode(DPU::SUBCzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(MI,
                              (((Insn >> 20) & 15) << 0) |
                                  (((Insn >> 16) & 15) << 4) |
                                  (((Insn >> 39) & 7) << 8),
                              11);
              DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                             (((Insn >> 24) & 31) << 0) |
                                 (((Insn >> 30) & 1) << 5));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                ((((Insn >> 30) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::SUBCzrif);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24),
                  27);
              DAsm.Decode_false_cc(MI);
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    if (((((Insn >> 32) & 0x3L)) != (0x3L)) &&
        ((((Insn >> 16) & 0x1L)) == (0x0L))) {
      if (((((Insn >> 20) & 0xfL)) & (0xcL)) == (0xcL)) {
        if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x0L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::ADD_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::ADD_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::ADD_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x2L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::ADDC_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::ADDC_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::ADDC_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::RSUB_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::RSUB_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::RSUB_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::RSUBC_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::RSUBC_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::RSUBC_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0x8L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                  ((((Insn >> 30) & 0x1L)) == (0x0L))) {
                MI.setOpcode(DPU::SUB_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                   ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                     (0x1L)) &&
                    (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                     ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUB_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                   (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                    (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                     (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUB_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0xaL)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                  ((((Insn >> 30) & 0x1L)) == (0x0L))) {
                MI.setOpcode(DPU::SUBC_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                   ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                     (0x1L)) &&
                    (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                     ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBC_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                   (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                    (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                     (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBC_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x0L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::ADD_Urrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::ADD_Urrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::ADD_Urrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x2L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::ADDC_Urrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::ADDC_Urrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::ADDC_Urrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::RSUB_Urrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::RSUB_Urrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::RSUB_Urrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::RSUBC_Urrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::RSUBC_Urrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::RSUBC_Urrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0x8L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                  ((((Insn >> 30) & 0x1L)) == (0x0L))) {
                MI.setOpcode(DPU::SUB_Urrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                   ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                     (0x1L)) &&
                    (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                     ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUB_Urrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                   (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                    (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                     (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUB_Urrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0xaL)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                  ((((Insn >> 30) & 0x1L)) == (0x0L))) {
                MI.setOpcode(DPU::SUBC_Urrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                   ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                     (0x1L)) &&
                    (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                     ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBC_Urrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                   (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                    (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                     (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBC_Urrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 46) & 0x1L)) == (0x0L))) {
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x0L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::ADDrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::ADDrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::ADDrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 28) & 0x1L)) == (0x1L)) &&
                ((((Insn >> 24) & 0xfL)) == (0x0L))) {
              if ((((Insn >> 37) & 0x3L)) != (0x3L)) {
                if (useSugar && (true)) {
                  MI.setOpcode(DPU::ADDSrrr);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_ra(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_rb(MI, (((Insn >> 34) & 31) << 0));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::ADDsss);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_rb(MI, (((Insn >> 34) & 31) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x2L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::ADDCrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::ADDCrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::ADDCrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::RSUBrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::RSUBrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::RSUBrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 28) & 0x1L)) == (0x1L)) &&
                ((((Insn >> 24) & 0xfL)) == (0x0L))) {
              if ((((Insn >> 37) & 0x3L)) != (0x3L)) {
                if (useSugar && (true)) {
                  MI.setOpcode(DPU::SUBSrrr);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_ra(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_rb(MI, (((Insn >> 34) & 31) << 0));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::SUBsss);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_rb(MI, (((Insn >> 34) & 31) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::RSUBCrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::RSUBCrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::RSUBCrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0x8L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                  ((((Insn >> 30) & 0x1L)) == (0x0L))) {
                MI.setOpcode(DPU::SUBrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                   ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                     (0x1L)) &&
                    (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                     ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                   (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                    (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                     (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0xaL)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                  ((((Insn >> 30) & 0x1L)) == (0x0L))) {
                MI.setOpcode(DPU::SUBCrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                   ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                     (0x1L)) &&
                    (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                     ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBCrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                   (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                    (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                     (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBCrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x0L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::ADDzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::ADDzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::ADDzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x2L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::ADDCzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::ADDCzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::ADDCzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Add_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::RSUBzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::RSUBzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::RSUBzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if ((((Insn >> 24) & 0x1fL)) == (0x0L)) {
                MI.setOpcode(DPU::RSUBCzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                   ((((Insn >> 28) & 0x1L)) == (0x0L)))) {
                MI.setOpcode(DPU::RSUBCzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_setCC,
                               (((Insn >> 24) & 31) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::RSUBCzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0x8L)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                  ((((Insn >> 30) & 0x1L)) == (0x0L))) {
                MI.setOpcode(DPU::SUBzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                   ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                     (0x1L)) &&
                    (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                     ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                   (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                    (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                     (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x5f000000L)) == (0x2000000L))) {
                  MI.setOpcode(DPU::JEQrri);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x5f000000L)) == (0x3000000L))) {
                  MI.setOpcode(DPU::JNEQrri);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x5f000000L)) == (0x14000000L))) {
                  MI.setOpcode(DPU::JLTUrri);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x5f000000L)) == (0x1b000000L))) {
                  MI.setOpcode(DPU::JGTUrri);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x5f000000L)) == (0x1a000000L))) {
                  MI.setOpcode(DPU::JLEUrri);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x5f000000L)) == (0x15000000L))) {
                  MI.setOpcode(DPU::JGEUrri);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x5f000000L)) == (0x16000000L))) {
                  MI.setOpcode(DPU::JLTSrri);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x5f000000L)) == (0x19000000L))) {
                  MI.setOpcode(DPU::JGTSrri);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x5f000000L)) == (0x18000000L))) {
                  MI.setOpcode(DPU::JLESrri);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                  (0x5f000000L)) == (0x17000000L))) {
                  MI.setOpcode(DPU::JGESrri);
                  DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                MI.setOpcode(DPU::SUBzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 28) & 0xfL)) & (0xaL)) == (0xaL)) {
            if (((((Insn >> 28) & 0x1L)) != (0x1L)) ||
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              if (((((Insn >> 24) & 0x1fL)) == (0x0L)) &&
                  ((((Insn >> 30) & 0x1L)) == (0x0L))) {
                MI.setOpcode(DPU::SUBCzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x1L)) ||
                   ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                     (0x1L)) &&
                    (((((Insn >> 25) & 0x1L)) == (0x1L)) &&
                     ((((Insn >> 28) & 0x1L)) == (0x0L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x1L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBCzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 30) & 0x1L)) == (0x0L)) &&
                   (((((Insn >> 24) & 0x1fL)) < (0x6L)) ||
                    (((((Insn >> 24) & 0x1fL)) > (0xbL)) ||
                     (((((Insn >> 24) & 0x1fL)) & (0x1eL)) == (0x8L))))) &&
                  (((((Insn >> 30) & 0x1L)) != (0x0L)) ||
                   ((((Insn >> 24) & 0x1fL)) != (0x0L)))) {
                MI.setOpcode(DPU::SUBCzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC,
                               (((Insn >> 24) & 31) << 0) |
                                   (((Insn >> 30) & 1) << 5));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 20) & 0xfL)) & (0xcL)) != (0xcL)) {
        if (((((Insn >> 28) & 0xfL)) & (0x2L)) == (0x0L)) {
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x7L)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x1L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_SH_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_SH_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_SH_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_SHrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_SHrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_SHrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_SHzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_SHzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_SHzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x6L)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x1L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_SL_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_SL_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_SL_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_SLrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_SLrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_SLrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_SLzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_SLzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_SLzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xbL)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x1L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_UH_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_UH_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_UH_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_UHrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_UHrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_UHrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_UHzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_UHzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_UHzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xaL)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x1L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_UL_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_UL_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_UL_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_ULrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_ULrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_ULrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SH_ULzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SH_ULzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SH_ULzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x5L)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x1L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_SH_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_SH_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_SH_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_SHrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_SHrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_SHrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_SHzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_SHzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_SHzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x4L)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x1L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_SL_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_SL_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_SL_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_SLrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_SLrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_SLrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_SLzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_SLzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_SLzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x9L)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x1L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_UH_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_UH_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_UH_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_UHrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_UHrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_UHrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_UHzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_UHzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_UHzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x8L)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x1L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_UL_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_UL_Srrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_UL_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_ULrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_ULrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_ULrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_SL_ULzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_SL_ULzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_SL_ULzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x3L)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UH_UH_Urrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UH_UH_Urrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UH_UH_Urrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UH_UHrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UH_UHrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UH_UHrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UH_UHzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UH_UHzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UH_UHzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x2L)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UH_UL_Urrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UH_UL_Urrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UH_UL_Urrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UH_ULrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UH_ULrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UH_ULrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UH_ULzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UH_ULzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UH_ULzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x1L)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UL_UH_Urrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UL_UH_Urrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UL_UH_Urrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UL_UHrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UL_UHrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UL_UHrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                  ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                MI.setOpcode(DPU::PMAXSWrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                               (((Insn >> 24) & 15) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UL_UHzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UL_UHzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UL_UHzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                  ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                MI.setOpcode(DPU::PMAXSWzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                               (((Insn >> 24) & 15) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x1L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::PMAXSW_Srrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                  ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                MI.setOpcode(DPU::PMAXSW_Srrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                               (((Insn >> 24) & 15) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x0L)) {
            if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                 ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                ((((Insn >> 39) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UL_UL_Urrr);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UL_UL_Urrrc);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UL_UL_Urrrci);
                DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                ((((Insn >> 46) & 0x1L)) == (0x0L))) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UL_ULrrr);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UL_ULrrrc);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UL_ULrrrci);
                DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                       (((Insn >> 44) & 3) << 3));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
              if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                MI.setOpcode(DPU::MUL_UL_ULzrr);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                   (0x1L)) &&
                  ((((Insn >> 25) & 0x1L)) == (0x1L))) {
                MI.setOpcode(DPU::MUL_UL_ULzrrc);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                               (((Insn >> 24) & 15) << 0));
                return MCDisassembler::Success;
              }
              if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                  ((((Insn >> 24) & 0x1fL)) != (0x0L))) {
                MI.setOpcode(DPU::MUL_UL_ULzrrci);
                DAsm.Decode_zero(MI, 24);
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC,
                               (((Insn >> 24) & 31) << 0));
                DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                return MCDisassembler::Success;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 28) & 0xfL)) & (0x3L)) == (0x2L)) {
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x8L)) {
            if ((((Insn >> 34) & 0x1fL)) == (0x18L)) {
              if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                   ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                  ((((Insn >> 39) & 0x1L)) == (0x1L))) {
                if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                  MI.setOpcode(DPU::TIME_Sr);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                         (((Insn >> 44) & 3) << 3));
                  return MCDisassembler::Success;
                }
                if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                     ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                    ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                  MI.setOpcode(DPU::TIME_Srci);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                                 (((Insn >> 24) & 15) << 0));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                   ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                  ((((Insn >> 39) & 0x1L)) == (0x0L))) {
                if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                  MI.setOpcode(DPU::TIME_Ur);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                         (((Insn >> 44) & 3) << 3));
                  return MCDisassembler::Success;
                }
                if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                     ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                    ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                  MI.setOpcode(DPU::TIME_Urci);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                                 (((Insn >> 24) & 15) << 0));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                  ((((Insn >> 46) & 0x1L)) == (0x0L))) {
                if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                  MI.setOpcode(DPU::TIMEr);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                         (((Insn >> 44) & 3) << 3));
                  return MCDisassembler::Success;
                }
                if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                     ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                    ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                  MI.setOpcode(DPU::TIMErci);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                                 (((Insn >> 24) & 15) << 0));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
                if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                  MI.setOpcode(DPU::TIMEz);
                  DAsm.Decode_zero(MI, 24);
                  return MCDisassembler::Success;
                }
                if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                     ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                    ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                  MI.setOpcode(DPU::TIMEzci);
                  DAsm.Decode_zero(MI, 24);
                  DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                                 (((Insn >> 24) & 15) << 0));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              return MCDisassembler::Fail;
            }
            if ((((Insn >> 34) & 0x1fL)) == (0x19L)) {
              if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                   ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                  ((((Insn >> 39) & 0x1L)) == (0x1L))) {
                if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                  MI.setOpcode(DPU::TIME_CFG_Srr);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                     ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                    ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                  MI.setOpcode(DPU::TIME_CFG_Srrci);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                                 (((Insn >> 24) & 15) << 0));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if ((((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                   ((((Insn >> 46) & 0x1L)) == (0x1L))) &&
                  ((((Insn >> 39) & 0x1L)) == (0x0L))) {
                if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                  MI.setOpcode(DPU::TIME_CFG_Urr);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                     ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                    ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                  MI.setOpcode(DPU::TIME_CFG_Urrci);
                  DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                                 (((Insn >> 24) & 15) << 0));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if (((((Insn >> 44) & 0x3L)) != (0x3L)) &&
                  ((((Insn >> 46) & 0x1L)) == (0x0L))) {
                if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                  MI.setOpcode(DPU::TIME_CFGrr);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                     ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                    ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                  MI.setOpcode(DPU::TIME_CFGrrci);
                  DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) |
                                         (((Insn >> 44) & 3) << 3));
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                                 (((Insn >> 24) & 15) << 0));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              if ((((Insn >> 44) & 0x3L)) == (0x3L)) {
                if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
                  if (useSugar && (true)) {
                    MI.setOpcode(DPU::TIME_CFGr);
                    DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                           (((Insn >> 32) & 3) << 3));
                    return MCDisassembler::Success;
                  }
                  MI.setOpcode(DPU::TIME_CFGzr);
                  DAsm.Decode_zero(MI, 24);
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  return MCDisassembler::Success;
                }
                if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                     ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
                    ((((Insn >> 24) & 0xfL)) != (0x0L))) {
                  MI.setOpcode(DPU::TIME_CFGzrci);
                  DAsm.Decode_zero(MI, 24);
                  DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                         (((Insn >> 32) & 3) << 3));
                  DAsm.Decode_cc(MI, ConditionClass::TrueCC,
                                 (((Insn >> 24) & 15) << 0));
                  DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
                  return MCDisassembler::Success;
                }
                return MCDisassembler::Fail;
              }
              return MCDisassembler::Fail;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    return MCDisassembler::Fail;
  }
  if (((((Insn >> 44) & 0xfL)) == (0x6L)) &&
      ((((Insn >> 42) & 0x3L)) != (0x3L))) {
    if (((((Insn >> 32) & 0x3L)) != (0x3L)) &&
        ((((Insn >> 16) & 0x1L)) == (0x0L))) {
      if ((((Insn >> 37) & 0x3L)) == (0x3L)) {
        if (((((Insn >> 39) & 0x1fL)) & (0x1eL)) == (0x0L)) {
          MI.setOpcode(DPU::ADDzri);
          DAsm.Decode_zero(MI, 24);
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        if (((((Insn >> 39) & 0x1fL)) & (0x1eL)) == (0x2L)) {
          MI.setOpcode(DPU::ADDCzri);
          DAsm.Decode_zero(MI, 24);
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        if (((((Insn >> 39) & 0x1fL)) & (0x1eL)) == (0xaL)) {
          MI.setOpcode(DPU::ANDzri);
          DAsm.Decode_zero(MI, 24);
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        if (((((Insn >> 39) & 0x1fL)) & (0x1eL)) == (0xcL)) {
          MI.setOpcode(DPU::ORzri);
          DAsm.Decode_zero(MI, 24);
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        if (((((Insn >> 39) & 0x1fL)) & (0x1eL)) == (0x4L)) {
          MI.setOpcode(DPU::SUBzir);
          DAsm.Decode_zero(MI, 24);
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          return MCDisassembler::Success;
        }
        if (((((Insn >> 39) & 0x1fL)) & (0x1eL)) == (0x6L)) {
          MI.setOpcode(DPU::SUBCzir);
          DAsm.Decode_zero(MI, 24);
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          return MCDisassembler::Success;
        }
        if (((((Insn >> 39) & 0x1fL)) & (0x1eL)) == (0x8L)) {
          MI.setOpcode(DPU::XORzri);
          DAsm.Decode_zero(MI, 24);
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    if ((((Insn >> 32) & 0x3L)) == (0x3L)) {
      if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
        if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                          (0x7c00000000L)) == (0x6000000000L))) {
          MI.setOpcode(DPU::MOVEri);
          DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        MI.setOpcode(DPU::ORrri);
        DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
        DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
        DAsm.Decode_imm(
            MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) |
                    (((Insn >> 24) & 255) << 24));
        return MCDisassembler::Success;
      }
      return MCDisassembler::Fail;
    }
    return MCDisassembler::Fail;
  }
  if (((((Insn >> 45) & 0x7L)) == (0x2L)) &&
      ((((Insn >> 42) & 0x3L)) != (0x3L))) {
    if ((((Insn >> 32) & 0x3L)) == (0x3L)) {
      if (((((Insn >> 44) & 0xfL)) == (0x5L)) &&
          ((((Insn >> 42) & 0x3L)) != (0x3L))) {
        if ((((Insn >> 37) & 0x3L)) == (0x3L)) {
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x7c00000000L)) == (0x6800000000L))) {
              MI.setOpcode(DPU::MOVE_Sri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::AND_Srki);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                        (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                        (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12) |
                        (((Insn >> 24) & 255) << 24));
            return MCDisassembler::Success;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x7c00000000L)) == (0x6800000000L))) {
              MI.setOpcode(DPU::MOVE_Uri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::AND_Urki);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                        (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                        (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12) |
                        (((Insn >> 24) & 255) << 24));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 37) & 0x3L)) != (0x3L)) {
          if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
            MI.setOpcode(DPU::ANDrri);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                        (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                        (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12) |
                        (((Insn >> 24) & 255) << 24));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 44) & 0xfL)) == (0x4L)) &&
          ((((Insn >> 42) & 0x3L)) != (0x3L))) {
        if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
          if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                            (0xffffffffL)) == (0xffffffffL))) {
            MI.setOpcode(DPU::NOTrr);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            return MCDisassembler::Success;
          }
          MI.setOpcode(DPU::XORrri);
          DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
          DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    if (((((Insn >> 32) & 0x3L)) != (0x3L)) &&
        ((((Insn >> 16) & 0x1L)) == (0x0L))) {
      if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
          ((((Insn >> 39) & 0x1L)) == (0x1L))) {
        if ((((Insn >> 37) & 0x3L)) == (0x3L)) {
          MI.setOpcode(DPU::OR_Srri);
          DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
          ((((Insn >> 39) & 0x1L)) == (0x0L))) {
        if ((((Insn >> 37) & 0x3L)) == (0x3L)) {
          MI.setOpcode(DPU::OR_Urri);
          DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    return MCDisassembler::Fail;
  }
  if (((((Insn >> 45) & 0x7L)) == (0x1L)) &&
      ((((Insn >> 42) & 0x3L)) != (0x3L))) {
    if (((((Insn >> 32) & 0x3L)) != (0x3L)) &&
        ((((Insn >> 16) & 0x1L)) == (0x0L))) {
      if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
          ((((Insn >> 39) & 0x1L)) == (0x1L))) {
        if ((((Insn >> 37) & 0x3L)) == (0x3L)) {
          MI.setOpcode(DPU::AND_Srri);
          DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
          ((((Insn >> 39) & 0x1L)) == (0x0L))) {
        if ((((Insn >> 37) & 0x3L)) == (0x3L)) {
          MI.setOpcode(DPU::AND_Urri);
          DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
          DAsm.Decode_rb(MI,
                         (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) |
                      (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) |
                      (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) |
                      (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    if ((((Insn >> 32) & 0x3L)) == (0x3L)) {
      if (((((Insn >> 44) & 0xfL)) == (0x2L)) &&
          ((((Insn >> 42) & 0x3L)) != (0x3L))) {
        if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
          if (useSugar &&
              (((((Insn >> 0) & 0xffffffffffffL)) & (0xffffffffL)) == (0x0L))) {
            MI.setOpcode(DPU::NEGrr);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            return MCDisassembler::Success;
          }
          MI.setOpcode(DPU::SUBrir);
          DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 44) & 0xfL)) == (0x3L)) &&
          ((((Insn >> 42) & 0x3L)) != (0x3L))) {
        if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
          MI.setOpcode(DPU::SUBCrir);
          DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
          DAsm.Decode_imm(
              MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 24) & 255) << 24));
          DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
          return MCDisassembler::Success;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    return MCDisassembler::Fail;
  }
  if ((((Insn >> 45) & 0x7L)) == (0x4L)) {
    if ((((Insn >> 32) & 0x3L)) == (0x3L)) {
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0xaL)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::AND_Srric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::AND_Srrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::AND_Srrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::AND_Urric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::AND_Urrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::AND_Urrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ANDrric);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ANDrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ANDrrif);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ANDzric);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ANDzrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11),
                12);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ANDzrif);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0xcL)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ANDN_Srric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ANDN_Srrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ANDN_Srrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ANDN_Urric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ANDN_Urrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ANDN_Urrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ANDNrric);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ANDNrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar && (true)) {
              MI.setOpcode(DPU::ANDNrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::ANDNrrif);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ANDNzric);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ANDNzrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11),
                12);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ANDNzrif);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xcL)) == (0x4L)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
              ((((Insn >> 29) & 0x1L)) == (0x0L))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASR_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSL_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1X_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLX_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSR_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1X_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRX_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROL_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::ROR_Srri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASR_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSL_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1X_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLX_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSR_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1X_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRX_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROL_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::ROR_Srric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
               (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                (((((Insn >> 24) & 0xfL)) > (0xdL)) ||
                 (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
              (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
               ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASR_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSL_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1X_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLX_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSR_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1X_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRX_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROL_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::ROR_Srrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
              ((((Insn >> 29) & 0x1L)) == (0x0L))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASR_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSL_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1X_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLX_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSR_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1X_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRX_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROL_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::ROR_Urri);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASR_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSL_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1X_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLX_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSR_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1X_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRX_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROL_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::ROR_Urric);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
               (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                (((((Insn >> 24) & 0xfL)) > (0xdL)) ||
                 (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
              (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
               ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASR_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSL_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1X_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLX_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSR_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1X_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRX_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROL_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::ROR_Urrici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
              ((((Insn >> 29) & 0x1L)) == (0x0L))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASRrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1rri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1Xrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSLrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLXrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1rri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1Xrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSRrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRXrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROLrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::RORrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASRrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1rric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1Xrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSLrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLXrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1rric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1Xrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSRrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRXrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROLrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::RORrric);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
               (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                (((((Insn >> 24) & 0xfL)) > (0xdL)) ||
                 (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
              (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
               ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASRrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1rrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1Xrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSLrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLXrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1rrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1Xrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSRrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRXrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROLrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::RORrrici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
              ((((Insn >> 29) & 0x1L)) == (0x0L))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASRzri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1zri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1Xzri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSLzri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLXzri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1zri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1Xzri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSRzri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRXzri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROLzri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::RORzri);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASRzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1zric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1Xzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSLzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLXzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1zric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1Xzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSRzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRXzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROLzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::RORzric);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
               (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                (((((Insn >> 24) & 0xfL)) > (0xdL)) ||
                 (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
              (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
               ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x8L)) {
              MI.setOpcode(DPU::ASRzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x6L)) {
              MI.setOpcode(DPU::LSL1zrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x7L)) {
              MI.setOpcode(DPU::LSL1Xzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x4L)) {
              MI.setOpcode(DPU::LSLzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x5L)) {
              MI.setOpcode(DPU::LSLXzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xeL)) {
              MI.setOpcode(DPU::LSR1zrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xfL)) {
              MI.setOpcode(DPU::LSR1Xzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xcL)) {
              MI.setOpcode(DPU::LSRzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xdL)) {
              MI.setOpcode(DPU::LSRXzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0x2L)) {
              MI.setOpcode(DPU::ROLzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (((((Insn >> 16) & 0xfL)) & (0xfL)) == (0xaL)) {
              MI.setOpcode(DPU::RORzrici);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0x0L)) {
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar &&
                (((((Insn >> 0) & 0xffffffffffffL)) & (0xffffffL)) == (0x0L))) {
              MI.setOpcode(DPU::CALLrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x7c00000000L)) == (0x6000000000L))) {
              MI.setOpcode(DPU::CALLri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_pc(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::CALLrri);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_off(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                        (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                        (((Insn >> 13) & 1) << 10) |
                        (((Insn >> 12) & 1) << 11) |
                        (((Insn >> 0) & 4095) << 12));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x7c00000000L)) == (0x6000000000L))) {
              MI.setOpcode(DPU::JUMPi);
              DAsm.Decode_pc(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27));
              return MCDisassembler::Success;
            }
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x138000ffffffL)) == (0x0L))) {
              MI.setOpcode(DPU::JUMPr);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if (useSugar && (true)) {
              MI.setOpcode(DPU::JUMPri);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_off(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12) |
                      (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::CALLzri);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_off(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0x3L)) {
        if (((((Insn >> 20) & 0xfL)) & (0x7L)) == (0x0L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CAO_Srr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CAO_Srrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CAO_Srrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CAO_Urr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CAO_Urrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CAO_Urrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CAOrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CAOrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CAOrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CAOzr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CAOzrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CAOzrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0x7L)) == (0x1L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLO_Srr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLO_Srrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLO_Srrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLO_Urr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLO_Urrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLO_Urrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLOrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLOrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLOrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLOzr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLOzrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLOzrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0x7L)) == (0x2L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLS_Srr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLS_Srrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLS_Srrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLS_Urr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLS_Urrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLS_Urrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLSrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLSrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLSrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLSzr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLSzrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLSzrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0x7L)) == (0x3L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLZ_Srr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLZ_Srrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLZ_Srrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLZ_Urr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLZ_Urrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLZ_Urrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLZrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLZrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLZrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CLZzr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::CLZzrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::CLZzrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Count_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0x7L)) == (0x5L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTSB_Srr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTSB_Srrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTSB_Srrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTSBrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTSBrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTSBrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTSBzr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTSBzrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTSBzrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0x7L)) == (0x7L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTSH_Srr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTSH_Srrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTSH_Srrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTSHrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTSHrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTSHrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTSHzr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTSHzrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTSHzrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0x7L)) == (0x4L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTUB_Urr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTUB_Urrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTUB_Urrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTUBrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTUBrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTUBrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTUBzr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTUBzrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTUBzrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0x7L)) == (0x6L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTUH_Urr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTUH_Urrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTUH_Urrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTUHrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTUHrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTUHrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::EXTUHzr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::EXTUHzrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::EXTUHzrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0x1L)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::HASH_Srric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::HASH_Srrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::HASH_Srrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::HASH_Urric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::HASH_Urrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::HASH_Urrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::HASHrric);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::HASHrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar && (true)) {
              MI.setOpcode(DPU::HASHrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::HASHrrif);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::HASHzric);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::HASHzrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11),
                12);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::HASHzrif);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0xfL)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NAND_Srric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NAND_Srrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::NAND_Srrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NAND_Urric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NAND_Urrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::NAND_Urrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NANDrric);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NANDrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar && (true)) {
              MI.setOpcode(DPU::NANDrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::NANDrrif);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NANDzric);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NANDzrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11),
                12);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::NANDzrif);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0xeL)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NOR_Srric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NOR_Srrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::NOR_Srrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NOR_Urric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NOR_Urrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::NOR_Urrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NORrric);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NORrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar && (true)) {
              MI.setOpcode(DPU::NORrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::NORrrif);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NORzric);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NORzrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11),
                12);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::NORzrif);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0x9L)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NXOR_Srric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NXOR_Srrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::NXOR_Srrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NXOR_Urric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NXOR_Urrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::NXOR_Urrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NXORrric);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NXORrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar && (true)) {
              MI.setOpcode(DPU::NXORrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::NXORrrif);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::NXORzric);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::NXORzrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11),
                12);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::NXORzrif);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0xbL)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::OR_Srric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if (useSugar &&
                (((((Insn >> 0) & 0xffffffffffffL)) & (0xff0000L)) == (0x0L))) {
              MI.setOpcode(DPU::MOVE_Srrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x7c00000000L)) == (0x6000000000L))) {
              MI.setOpcode(DPU::MOVE_Srici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::OR_Srrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar &&
                (((((Insn >> 0) & 0xffffffffffffL)) & (0xffffffL)) == (0x0L))) {
              MI.setOpcode(DPU::MOVE_Srr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::OR_Srrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::OR_Urric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x7c00000000L)) == (0x6000000000L))) {
              MI.setOpcode(DPU::MOVE_Urici);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (useSugar &&
                (((((Insn >> 0) & 0xffffffffffffL)) & (0xff0000L)) == (0x0L))) {
              MI.setOpcode(DPU::MOVE_Urrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::OR_Urrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar &&
                (((((Insn >> 0) & 0xffffffffffffL)) & (0xffffffL)) == (0x0L))) {
              MI.setOpcode(DPU::MOVE_Urr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::OR_Urrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ORrric);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if (useSugar &&
                (((((Insn >> 0) & 0xffffffffffffL)) & (0xff0000L)) == (0x0L))) {
              MI.setOpcode(DPU::MOVErrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x7c00000000L)) == (0x6000000000L))) {
              MI.setOpcode(DPU::MOVErici);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_imm(
                  MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4),
                  8);
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::ORrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar &&
                (((((Insn >> 0) & 0xffffffffffffL)) & (0xffffffL)) == (0x0L))) {
              MI.setOpcode(DPU::MOVErr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::ORrrif);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ORzric);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ORzrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11),
                12);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ORzrif);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0xdL)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ORN_Srric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ORN_Srrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ORN_Srrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ORN_Urric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ORN_Urrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ORN_Urrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ORNrric);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ORNrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            if (useSugar && (true)) {
              MI.setOpcode(DPU::ORNrri);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_imm(
                  MI,
                  (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                      (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                      (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                      (((Insn >> 0) & 4095) << 12),
                  24);
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::ORNrrif);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::ORNzric);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ORNzrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11),
                12);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ORNzrif);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0x2L)) {
        if (((((Insn >> 20) & 0xfL)) & (0xcL)) == (0x0L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::SATS_Srr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::SATS_Srrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::SATS_Srrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::SATS_Urr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::SATS_Urrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::SATS_Urrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::SATSrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::SATSrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::SATSrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::SATSzr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::SATSzrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::SATSzrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0x8L)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::XOR_Srric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::XOR_Srrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::XOR_Srrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::XOR_Urric);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::XOR_Urrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::XOR_Urrif);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::XORrric);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0xff0000L)) == (0xff0000L))) {
              MI.setOpcode(DPU::NOTrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::XORrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::XORrrif);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12),
                24);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::XORzric);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0x138000ff0000L)) == (0x138000ff0000L))) {
              MI.setOpcode(DPU::NOTrci);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::XORzrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11),
                12);
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::XORzrif);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_imm(
                MI,
                (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) |
                    (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) |
                    (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) |
                    (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) |
                    (((Insn >> 44) & 1) << 27),
                28);
            DAsm.Decode_false_cc(MI);
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    if (((((Insn >> 32) & 0x3L)) != (0x3L)) &&
        ((((Insn >> 16) & 0x1L)) == (0x0L))) {
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0xcL)) {
        if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xaL)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::AND_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::AND_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::AND_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::AND_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::AND_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::AND_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ANDrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ANDrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ANDrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ANDzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ANDzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ANDzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xcL)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ANDN_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ANDN_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ANDN_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ANDN_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ANDN_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ANDN_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ANDNrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ANDNrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ANDNrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ANDNzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ANDNzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ANDNzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x0L)) {
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CALLrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::CALLzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x1L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::HASH_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::HASH_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::HASH_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::HASH_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::HASH_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::HASH_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::HASHrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::HASHrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::HASHrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::HASHzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::HASHzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::HASHzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xfL)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NAND_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NAND_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NAND_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NAND_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NAND_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NAND_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NANDrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NANDrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NANDrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NANDzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NANDzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NANDzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xeL)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NOR_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NOR_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NOR_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NOR_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NOR_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NOR_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NORrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NORrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NORrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NORzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NORzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NORzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x9L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NXOR_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NXOR_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NXOR_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NXOR_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NXOR_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NXOR_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NXORrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NXORrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NXORrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::NXORzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::NXORzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::NXORzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xbL)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::OR_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::OR_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::OR_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::OR_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::OR_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::OR_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ORrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ORrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ORrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ORzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ORzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ORzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xdL)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ORN_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ORN_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ORN_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ORN_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ORN_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ORN_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ORNrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ORNrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ORNrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::ORNzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ORNzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::ORNzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x8L)) {
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x1L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::XOR_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::XOR_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::XOR_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
               ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
              ((((Insn >> 39) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::XOR_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::XOR_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::XOR_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
              ((((Insn >> 44) & 0x1L)) == (0x0L))) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::XORrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::XORrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::XORrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
            if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
              MI.setOpcode(DPU::XORzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::XORzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                 (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                  (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
                ((((Insn >> 24) & 0xfL)) != (0x0L))) {
              MI.setOpcode(DPU::XORzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xdL)) == (0xdL)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x8L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::ASR_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ASR_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::ASR_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x4L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSL_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSL_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSL_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x6L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSL1_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSL1_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSL1_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x7L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSL1X_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSL1X_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSL1X_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x5L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSLX_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSLX_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSLX_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xcL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSR_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSR_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSR_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xeL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSR1_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSR1_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSR1_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xfL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSR1X_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSR1X_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSR1X_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xdL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSRX_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSRX_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSRX_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x2L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::ROL_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ROL_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::ROL_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xaL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::ROR_Srrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ROR_Srrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::ROR_Srrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x8L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::ASR_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ASR_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::ASR_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x4L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSL_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSL_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSL_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x6L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSL1_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSL1_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSL1_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x7L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSL1X_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSL1X_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSL1X_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x5L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSLX_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSLX_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSLX_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xcL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSR_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSR_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSR_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xeL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSR1_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSR1_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSR1_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xfL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSR1X_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSR1X_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSR1X_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xdL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSRX_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSRX_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSRX_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x2L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::ROL_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ROL_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::ROL_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xaL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::ROR_Urrr);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ROR_Urrrc);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::ROR_Urrrci);
              DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x8L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::ASRrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ASRrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::ASRrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x6L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSL1rrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSL1rrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSL1rrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x7L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSL1Xrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSL1Xrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSL1Xrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x4L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSLrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSLrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSLrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x5L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSLXrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSLXrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSLXrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xeL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSR1rrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSR1rrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSR1rrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xfL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSR1Xrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSR1Xrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSR1Xrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xcL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSRrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSRrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSRrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xdL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSRXrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSRXrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSRXrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x2L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::ROLrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ROLrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::ROLrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xaL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::RORrrr);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::RORrrrc);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::RORrrrci);
              DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x8L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::ASRzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ASRzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::ASRzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x6L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSL1zrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSL1zrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSL1zrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x7L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSL1Xzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSL1Xzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSL1Xzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x4L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSLzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSLzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSLzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x5L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSLXzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSLXzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSLXzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xeL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSR1zrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSR1zrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSR1zrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xfL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSR1Xzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSR1Xzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSR1Xzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xcL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSRzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSRzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSRzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xdL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::LSRXzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::LSRXzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::LSRXzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0x2L)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::ROLzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::ROLzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::ROLzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          if (((((Insn >> 20) & 0xfL)) & (0xfL)) == (0xaL)) {
            if (((((Insn >> 24) & 0xfL)) == (0x0L)) &&
                ((((Insn >> 29) & 0x1L)) == (0x0L))) {
              MI.setOpcode(DPU::RORzrr);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              return MCDisassembler::Success;
            }
            if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) ==
                 (0x1L)) &&
                ((((Insn >> 25) & 0x1L)) == (0x1L))) {
              MI.setOpcode(DPU::RORzrrc);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                             (((Insn >> 24) & 15) << 0));
              return MCDisassembler::Success;
            }
            if (((((((Insn >> 29) & 0x1L)) == (0x0L)) &&
                  (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                   (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                    (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) ||
                 (((((Insn >> 29) & 0x1L)) == (0x1L)) &&
                  (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                   (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L))))) &&
                (((((Insn >> 29) & 0x1L)) != (0x0L)) ||
                 ((((Insn >> 24) & 0xfL)) != (0x0L)))) {
              MI.setOpcode(DPU::RORzrrci);
              DAsm.Decode_zero(MI, 24);
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC,
                             (((Insn >> 24) & 15) << 0) |
                                 (((Insn >> 29) & 1) << 4));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xcL)) == (0x8L)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::CMPB4_Srrr);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::CMPB4_Srrrc);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::CMPB4_Srrrci);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::CMPB4_Urrr);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::CMPB4_Urrrc);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::CMPB4_Urrrci);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::CMPB4rrr);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::CMPB4rrrc);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::CMPB4rrrci);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::CMPB4zrr);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 26) & 0x1L)) ^ (((Insn >> 27) & 0x1L))) == (0x1L)) &&
              ((((Insn >> 25) & 0x1L)) == (0x1L))) {
            MI.setOpcode(DPU::CMPB4zrrc);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_cc(MI, ConditionClass::Log_setCC,
                           (((Insn >> 24) & 15) << 0));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x6L)) ||
               (((((Insn >> 24) & 0xfL)) > (0xbL)) ||
                (((((Insn >> 24) & 0xfL)) & (0xeL)) == (0x8L)))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::CMPB4zrrci);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_cc(MI, ConditionClass::Log_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSL_ADD_Srrri);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSL_ADD_Srrrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSL_ADD_Urrri);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSL_ADD_Urrrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSL_ADDrrri);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSL_ADDrrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSL_ADDzrri);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSL_ADDzrrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSL_SUB_Srrri);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSL_SUB_Srrrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSL_SUB_Urrri);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSL_SUB_Urrrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSL_SUBrrri);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSL_SUBrrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSL_SUBzrri);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSL_SUBzrrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x2L)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSR_ADD_Srrri);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSR_ADD_Srrrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSR_ADD_Urrri);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSR_ADD_Urrrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSR_ADDrrri);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSR_ADDrrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::LSR_ADDzrri);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::LSR_ADDzrrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x0L)) {
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x1L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ROL_ADD_Srrri);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ROL_ADD_Srrrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((((Insn >> 42) & 0x3L)) != (0x3L)) &&
             ((((Insn >> 44) & 0x1L)) == (0x1L))) &&
            ((((Insn >> 39) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ROL_ADD_Urrri);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ROL_ADD_Urrrici);
            DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if (((((Insn >> 42) & 0x3L)) != (0x3L)) &&
            ((((Insn >> 44) & 0x1L)) == (0x0L))) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ROL_ADDrrri);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ROL_ADDrrrici);
            DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        if ((((Insn >> 42) & 0x3L)) == (0x3L)) {
          if ((((Insn >> 24) & 0xfL)) == (0x0L)) {
            MI.setOpcode(DPU::ROL_ADDzrri);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            return MCDisassembler::Success;
          }
          if ((((((Insn >> 24) & 0xfL)) < (0x2L)) ||
               ((((Insn >> 24) & 0xfL)) > (0xbL))) &&
              ((((Insn >> 24) & 0xfL)) != (0x0L))) {
            MI.setOpcode(DPU::ROL_ADDzrrici);
            DAsm.Decode_zero(MI, 24);
            DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::Div_nzCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    if (((((Insn >> 32) & 0x3L)) != (0x3L)) &&
        ((((Insn >> 16) & 0x1L)) == (0x1L))) {
      if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x6L)) {
        if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
          if (((((Insn >> 24) & 0xfL)) < (0x2L)) ||
              ((((Insn >> 24) & 0xfL)) > (0xbL))) {
            if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                              (0xf00ffffL)) == (0x0L))) {
              MI.setOpcode(DPU::DIV_STEPrrri);
              DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              return MCDisassembler::Success;
            }
            MI.setOpcode(DPU::DIV_STEPrrrici);
            DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
            DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
            DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                   (((Insn >> 32) & 3) << 3));
            DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                      (((Insn >> 28) & 1) << 4));
            DAsm.Decode_cc(MI, ConditionClass::DivCC,
                           (((Insn >> 24) & 15) << 0));
            DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
            return MCDisassembler::Success;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0x2L)) {
        if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
          if ((((Insn >> 34) & 0x1fL)) == (0x18L)) {
            if (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                ((((Insn >> 24) & 0xfL)) > (0xbL))) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0xf00ffffL)) == (0x0L))) {
                MI.setOpcode(DPU::MOVDrr);
                DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
                DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::MOVDrrci);
              DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::True_falseCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xeL)) == (0x4L)) {
        if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
          if ((((Insn >> 34) & 0x1fL)) != (0x18L)) {
            if (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                ((((Insn >> 24) & 0xfL)) > (0xbL))) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0xf00ffffL)) == (0x0L))) {
                MI.setOpcode(DPU::MUL_STEPrrri);
                DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
                DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
                DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                          (((Insn >> 28) & 1) << 4));
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::MUL_STEPrrrici);
              DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
              DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) |
                                        (((Insn >> 28) & 1) << 4));
              DAsm.Decode_cc(MI, ConditionClass::BootCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      if (((((Insn >> 28) & 0xfL)) & (0xfL)) == (0xaL)) {
        if ((((Insn >> 42) & 0x3L)) != (0x3L)) {
          if ((((Insn >> 34) & 0x1fL)) == (0x18L)) {
            if (((((Insn >> 24) & 0xfL)) < (0x6L)) ||
                ((((Insn >> 24) & 0xfL)) > (0xbL))) {
              if (useSugar && (((((Insn >> 0) & 0xffffffffffffL)) &
                                (0xf00ffffL)) == (0x0L))) {
                MI.setOpcode(DPU::SWAPDrr);
                DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
                DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                       (((Insn >> 32) & 3) << 3));
                return MCDisassembler::Success;
              }
              MI.setOpcode(DPU::SWAPDrrci);
              DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
              DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) |
                                     (((Insn >> 32) & 3) << 3));
              DAsm.Decode_cc(MI, ConditionClass::True_falseCC,
                             (((Insn >> 24) & 15) << 0));
              DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
              return MCDisassembler::Success;
            }
            return MCDisassembler::Fail;
          }
          return MCDisassembler::Fail;
        }
        return MCDisassembler::Fail;
      }
      return MCDisassembler::Fail;
    }
    return MCDisassembler::Fail;
  }
  return MCDisassembler::Fail;

  return MCDisassembler::Fail;
}
